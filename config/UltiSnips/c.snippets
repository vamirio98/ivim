# Functions.
global !p

# @param num Number of parameters.
# @param hasReturn 1 means having return value and 0 means not.
def genFuncCommet(snip, num, hasReturn):
	desc = "// @brief ${1:Brief description}"
	paramNo = 2
	func = ("${" + f"{paramNo}" + ":function_name}("
		+ ("" if int(num) != 0 else "void);"))
	for i in range(0, int(num)):
		paramNo += 1
		func += "${" + f"{paramNo}" + ":Type} "
		paramNo += 1
		func += ("${" + f"{paramNo}" + ":Param}"
		      + (", " if i < int(num) - 1 else ");"))
		desc += ("\n//\n// @param $" + f"{paramNo}" + " "
		      + "${" + f"{paramNo + 1}" + ":Description}")
		paramNo += 2

	if int(hasReturn) == 1:
		paramNo += (0 if int(num) != 0 else 1)
		func = "\n${" + f"{paramNo}" + ":int} " + func
		paramNo += 1
		desc += ("\n//\n// @return ${" + f"{paramNo}"
		      + ":Description}")
	else:
		func = "\nvoid " + func

	snip.expand_anon(desc + func)

endglobal

# Snippets.
priority 1

post_jump "genFuncCommet(snip, match.group(1), 1)"
snippet "fund(\d+)" "function declaration with documentation" br
endsnippet

post_jump "genFuncCommet(snip, match.group(1), 0)"
snippet "vfund(\d+)" "function declaration with documentation, no return value" br
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif // ifndef $1
endsnippet

snippet #ifu "#if unix #endif" b
#if defined(unix) || defined(__unix__) || defined(__unix)
${VISUAL}$0
#endif
endsnippet

snippet #ifw "#if unix #endif" b
#if defined(_WIN32)
${VISUAL}$0
#endif
endsnippet

snippet #ifuw "#if unix #else windows #endif" b
#if defined(unix) || defined(__unix__) || defined(__unix)
$1
#elif defined(_WIN32)
$2
#endif
endsnippet
