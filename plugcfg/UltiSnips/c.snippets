priority 1

global !p
def GenFuncComment(snip, num, has_detail, has_return):
	desc = "/**\n * ${1:Brief description}\n *\n"
	param_no = 2
	if int(has_detail) == 1:
		desc += " * ${" + f"{param_no}" + ":Detail}\n *\n"
		param_no += 1

	func = "${" + f"{param_no}" + ":function_name}("
	for i in range(0, int(num)):
		param_no += 1
		func += "${" + f"{param_no}" + ":Type} "
		param_no += 1
		func += "${" + f"{param_no}" + ":Param}" \
		      + (", " if i < int(num) - 1 else ");")
		desc += " * @param $" + f"{param_no}" + " " \
		      + "${" + f"{param_no + 1}" + ":Description}\n"
		param_no += 2

	if int(has_return) == 1:
		func = "${" + f"{param_no}" + ":int} " + func
		param_no += 1
		desc += " *\n * @return ${" + f"{param_no}" + ":Description}\n"
	else:
		func = "void " + func

	desc += " */\n"
	snip.expand_anon(desc + func)
endglobal

post_jump "GenFuncComment(snip, int(match.group(1)), 1, 1)"
snippet "cfun(\d+)" "function declaration with documentation" br
endsnippet

post_jump "GenFuncComment(snip, int(match.group(1)), 1, 0)"
snippet "cvfun(\d+)" "function declaration with documentation" br
endsnippet

post_jump "GenFuncComment(snip, int(match.group(1)), 0, 1)"
snippet "vcfun(\d+)" "function declaration with documentation" br
endsnippet

post_jump "GenFuncComment(snip, int(match.group(1)), 0, 0)"
snippet "vcvfun(\d+)" "function declaration with documentation" br
endsnippet
