priority 1

extends c

# Functions.
global !p

# @param num Number of parameters
# @param hasReturn 1 means having return value and 0 means not
def genFuncCommet(snip, num, hasReturn):
	desc = "// @brief ${1:Brief description}"
	paramNo = 2
	func = ("${" + f"{paramNo}" + ":function_name}("
		+ ("" if int(num) != 0 else ");"))
	for i in range(0, int(num)):
		paramNo += 1
		func += "${" + f"{paramNo}" + ":Type} "
		paramNo += 1
		func += ("${" + f"{paramNo}" + ":Param}"
		      + (", " if i < int(num) - 1 else ");"))
		desc += ("\n//\n// @param $" + f"{paramNo}" + " "
		      + "${" + f"{paramNo + 1}" + ":Description}")
		paramNo += 2

	if int(hasReturn) == 1:
		paramNo += (0 if int(num) != 0 else 1)
		func = "\n${" + f"{paramNo}" + ":int} " + func
		paramNo += 1
		desc += ("\n//\n// @return ${" + f"{paramNo}"
		      + ":Description}")
	else:
		func = "\nvoid " + func

	snip.expand_anon(desc + func)

endglobal

# Snippets.
# Overload the same items.
priority 2

post_jump "genFuncCommet(snip, match.group(1), 1)"
snippet "fund(\d+)" "function declaration with documentation" br
endsnippet

post_jump "genFuncCommet(snip, match.group(1), 0)"
snippet "vfund(\d+)" "function declaration with documentation, no return value" br
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/\/ /m}namespace $1${1/.+//m}
endsnippet
